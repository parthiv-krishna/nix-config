# Auto-generated using compose2nix v0.3.1.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = true;
    defaultNetwork.settings = {
      # Required for container networking to be able to use names.
      dns_enabled = true;
    };
  };

  # Enable container name DNS for non-default Podman networks.
  # https://github.com/NixOS/nixpkgs/issues/226365
  networking.firewall.interfaces."podman+".allowedUDPPorts = [ 53 ];

  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."traefik-reverse-proxy" = {
    image = "traefik:latest";
    volumes = [
      "/etc/localtime:/etc/localtime:ro"
      "/home/parthiv/nix-config/system/common/optional/containers/traefik/config.yml:/config.yaml:ro"
      "/home/parthiv/nix-config/system/common/optional/containers/traefik/traefik.yml:/traefik.yaml:ro"
      "/run/podman/podman.sock:/var/run/docker.sock:rw"
      "/var/lib/traefik/acme.json:/acme.json:rw"
      "/var/log/traefik:/var/log/traefik:rw"
    ];
    ports = [
      "80:80/tcp"
      "443:443/tcp"
    ];
    labels = {
      "traefik.enable" = "true";
      "traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto" = "https";
      "traefik.http.middlewares.traefik-https-redirect.redirectscheme.scheme" = "https";
      "traefik.http.routers.traefik-secure.entrypoints" = "https";
      "traefik.http.routers.traefik-secure.rule" = "Host(`traefik.sub0.net`)";
      "traefik.http.routers.traefik-secure.service" = "api@internal";
      "traefik.http.routers.traefik-secure.tls" = "true";
      "traefik.http.routers.traefik-secure.tls.certresolver" = "cloudflare";
      "traefik.http.routers.traefik-secure.tls.domains[0].main" = "sub0.net";
      "traefik.http.routers.traefik-secure.tls.domains[0].sans" = "*.sub0.net";
      "traefik.http.routers.traefik.entrypoints" = "http";
      "traefik.http.routers.traefik.middlewares" = "traefik-https-redirect";
      "traefik.http.routers.traefik.rule" = "Host(`traefik.sub0.net`)";
    };
    log-driver = "journald";
    extraOptions = [
      "--network-alias=reverse-proxy"
      "--network=traefik_proxy"
      "--security-opt=no-new-privileges:true"
    ];
  };
  systemd.services."podman-traefik-reverse-proxy" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    after = [
      "podman-network-traefik_proxy.service"
    ];
    requires = [
      "podman-network-traefik_proxy.service"
    ];
    partOf = [
      "podman-compose-traefik-root.target"
    ];
    wantedBy = [
      "podman-compose-traefik-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-traefik_proxy" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f traefik_proxy";
    };
    script = ''
      podman network inspect traefik_proxy || podman network create traefik_proxy
    '';
    partOf = [ "podman-compose-traefik-root.target" ];
    wantedBy = [ "podman-compose-traefik-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-traefik-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
